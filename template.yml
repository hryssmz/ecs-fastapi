AWSTemplateFormatVersion: "2010-09-09"
Description: ecs-fastapi app stack

Parameters:
  ProjectName:
    Type: String
    Description: Project name
    Default: ecs-fastapi

  ContainerName:
    Type: String
    Description: App container name
    Default: myapp

Resources:
  # VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 172.20.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: ProjectName
          Value:
            Ref: ProjectName
        - Key: Name
          Value:
            Fn::Sub: ${ProjectName}-vpc

  Subnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 172.20.16.0/20
      VpcId:
        Ref: VPC
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: ProjectName
          Value:
            Ref: ProjectName
        - Key: Name
          Value:
            Fn::Sub: ${ProjectName}-sn

  Subnet2:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 172.20.32.0/20
      VpcId:
        Ref: VPC
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: ProjectName
          Value:
            Ref: ProjectName
        - Key: Name
          Value:
            Fn::Sub: ${ProjectName}-sn2

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: ProjectName
          Value:
            Ref: ProjectName
        - Key: Name
          Value:
            Fn::Sub: ${ProjectName}-rtb

  SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: Subnet
      RouteTableId:
        Ref: RouteTable

  Subnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: Subnet2
      RouteTableId:
        Ref: RouteTable

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: ProjectName
          Value:
            Ref: ProjectName
        - Key: Name
          Value:
            Fn::Sub: ${ProjectName}-igw

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: VPC
      InternetGatewayId:
        Ref: InternetGateway

  InternetRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId:
        Ref: RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway

  # Elastic Load Balancing
  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn:
      - InternetRoute
      - SubnetRouteTableAssociation
      - Subnet2RouteTableAssociation
    Properties:
      Name:
        Fn::Sub: ${ProjectName}-ALB
      Type: application
      IpAddressType: ipv4
      Scheme: internet-facing
      SecurityGroups:
        - Ref: ALBSecurityGroup
      Subnets:
        - Ref: Subnet
        - Ref: Subnet2
      Tags:
        - Key: ProjectName
          Value:
            Ref: ProjectName

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name:
        Fn::Sub: ${ProjectName}-ALBTargetGroup
      TargetType: ip
      IpAddressType: ipv4
      Protocol: HTTP
      ProtocolVersion: HTTP1
      Port: 8000
      VpcId:
        Ref: VPC
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      Matcher:
        HttpCode: 200
      HealthCheckIntervalSeconds: 15
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 3
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 10
      Tags:
        - Key: ProjectName
          Value:
            Ref: ProjectName

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn:
        Ref: ALB
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: ALBTargetGroup

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName:
        Fn::Sub: ${ProjectName}-ALBSecurityGroup
      GroupDescription: ALB security group
      VpcId:
        Ref: VPC
      SecurityGroupIngress:
        - Description: HTTP inbound rule
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: ProjectName
          Value:
            Ref: ProjectName
        - Key: Name
          Value:
            Fn::Sub: ${ProjectName}-sg-alb

  TargetSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName:
        Fn::Sub: ${ProjectName}-TargetSecurityGroup
      GroupDescription: Target security group
      VpcId:
        Ref: VPC
      SecurityGroupIngress:
        - Description: HTTP inbound rule for debug
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: ProjectName
          Value:
            Ref: ProjectName
        - Key: Name
          Value:
            Fn::Sub: ${ProjectName}-sg-tgt

  ALBSecurityGroupEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: HTTP outbound rule
      GroupId:
        Ref: ALBSecurityGroup
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      DestinationSecurityGroupId:
        Ref: TargetSecurityGroup

  TargetSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: HTTP inbound rule
      GroupId:
        Ref: TargetSecurityGroup
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      SourceSecurityGroupId:
        Ref: ALBSecurityGroup

  # ECS
  ECSNamespace:
    Type: AWS::ServiceDiscovery::HttpNamespace
    Properties:
      Name:
        Fn::Sub: ${ProjectName}-ECSNamespace
      Description: ECS namespace
      Tags:
        - Key: ProjectName
          Value:
            Ref: ProjectName

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName:
        Fn::Sub: ${ProjectName}-ECSCluster
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT
      DefaultCapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Weight: 1
        - CapacityProvider: FARGATE_SPOT
          Weight: 1
      Configuration:
        ExecuteCommandConfiguration:
          Logging: DEFAULT
      ClusterSettings:
        - Name: containerInsights
          Value: disabled
      ServiceConnectDefaults:
        Namespace:
          Fn::GetAtt: ECSNamespace.Arn
      Tags:
        - Key: ProjectName
          Value:
            Ref: ProjectName

  ECSExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${ProjectName}-ECSExecutionRole
      Description: Service role for ECS container agents
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      Tags:
        - Key: ProjectName
          Value:
            Ref: ProjectName

  ECSTaskPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName:
        Fn::Sub: ${ProjectName}-ECSTaskPolicy
      Description: Execution policy for ECS containers
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - s3:ListAllMyBuckets
            Resource: "*"

  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${ProjectName}-ECSTaskRole
      Description: Service role for ECS containers
      ManagedPolicyArns:
        - Ref: ECSTaskPolicy
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      Tags:
        - Key: ProjectName
          Value:
            Ref: ProjectName

  ECSLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/ecs/${ProjectName}-ECSLogGroup

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family:
        Fn::Sub: ${ProjectName}-TaskDefinition
      Cpu: 256
      Memory: 512
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      RuntimePlatform:
        OperatingSystemFamily: LINUX
      ExecutionRoleArn:
        Fn::GetAtt: ECSExecutionRole.Arn
      TaskRoleArn:
        Fn::GetAtt: ECSTaskRole.Arn
      ContainerDefinitions:
        - Name:
            Ref: ContainerName
          Image:
            Fn::Sub: ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ProjectName}
          Essential: true
          PortMappings:
            - ContainerPort: 80
              Protocol: tcp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region:
                Ref: AWS::Region
              awslogs-group:
                Ref: ECSLogGroup
              awslogs-stream-prefix: TaskDefinition
          HealthCheck:
            Command: curl -f http://localhost || exit 1
            Interval: 15
            Retries: 3
            Timeout: 5

  ECSService:
    Type: AWS::ECS::Service
    DependsOn:
      - ALBTargetGroup
      - ALBListener
    Properties:
      ServiceName:
        Fn::Sub: ${ProjectName}-ECSService
      Cluster:
        Ref: ECSCluster
      TaskDefinition:
        Ref: TaskDefinition
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - Ref: TargetSecurityGroup
          Subnets:
            - Ref: Subnet
            - Ref: Subnet2
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      LoadBalancers:
        - ContainerName:
            Ref: ContainerName
          ContainerPort: 80
          TargetGroupArn:
            Ref: ALBTargetGroup
      HealthCheckGracePeriodSeconds: 60
      EnableECSManagedTags: true
      PropagateTags: SERVICE
      SchedulingStrategy: REPLICA

  # Auto Scaling
  ScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      ServiceNamespace: ecs
      ScalableDimension: ecs:service:DesiredCount
      MinCapacity: 1
      MaxCapacity: 3
      ResourceId:
        Fn::Sub: service/${ECSCluster}/${ECSService.Name}
      RoleARN:
        Fn::Sub: arn:${AWS::Partition}:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService

  ScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName:
        Fn::Sub: ${ProjectName}-ScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId:
        Ref: ScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 70
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization

Outputs:
  ALBDNSName:
    Value:
      Fn::GetAtt: ALB.DNSName

  ECSCluster:
    Value:
      Ref: ECSCluster

  ECSServiceName:
    Value:
      Fn::GetAtt: ECSService.Name
